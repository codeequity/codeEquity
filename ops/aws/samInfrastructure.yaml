AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: 
  Construct serverless infrastructure for CodeEquity

Resources:

  CECognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: CodeEquityCognitoUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
  
  CECognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref CECognitoUserPool
      ClientName: CodeEquityApp
      GenerateSecret: false

  PersonTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEPeople
      PrimaryKey:
        Name: PersonId
        Type: String

  GithubTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEGithub
      PrimaryKey:
        Name: GHAccountId
        Type: String

  RepoStatusTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CERepoStatus
      PrimaryKey:
        Name: GHRepo
        Type: String

  # provisioned throughput set to PAY_PER_REQUEST, same as simpletable
  LinkageTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: CELinkage
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        -
          AttributeName: GHIssueId
          AttributeType: S
        -
          AttributeName: GHCardId
          AttributeType: S
      KeySchema:
        -
          AttributeName: GHIssueId
          KeyType: HASH
        -
          AttributeName: GHCardId
          KeyType: RANGE

  AgreementTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEAgreements
      PrimaryKey:
        Name: AgreementId
        Type: String

  PEQTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEPEQs
      PrimaryKey:
        Name: PEQId
        Type: String

  PEQActionTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEPEQActions
      PrimaryKey:
        Name: PEQActionId
        Type: String

  PEQRawTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEPEQRaw
      PrimaryKey:
        Name: PEQRawId
        Type: String

  PEQSummaryTable:
    Type: 'AWS::Serverless::SimpleTable'
    Properties:
      TableName: CEPEQSummary
      PrimaryKey:
        Name: PEQSummaryId
        Type: String


# SAM implicit API does not handle edge, cors properly. Explicit is
  #     required, meaning swagger def is required as well.
  CEAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      EndpointConfiguration: EDGE
      #SAM is not fully expanding this as below, leading to mysterious auth failures.
      #Cors: "'*'"
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
      StageName: prod
      DefinitionBody:
        swagger: 2.0
        info:
          title: CodeEquity API
        schemes:
          - https
        paths:
            /find:
              post:
                produces:
                - "application/json"
                responses:
                  "200":
                    description: "200 response"
                    schema:
                      $ref: "#/definitions/Empty"
                security:
                - CodeEquitySec: []
                x-amazon-apigateway-integration:
                  httpMethod: POST
                  contentHandling: "CONVERT_TO_TEXT"
                  type: aws_proxy
                  uri:
                    Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CELambda.Arn}/invocations
                  responses:
                    default:
                      statusCode: "200"
        securityDefinitions:
          CodeEquitySec:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
              - Fn::Sub: ${CECognitoUserPool.Arn}
              type: "cognito_user_pools"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  CELambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./lambdaHandlers/
      Handler: awsDynamo.handler
      Runtime: nodejs10.x
      Description: AWS Handler
      Events:
        FindAPI:
          Type: Api 
          Properties:
            RestApiId: !Ref CEAPI
            Path: /find
            Method: post
            Auth:
              Authorizer: CodeEquitySec
      Policies:
       - DynamoDBCrudPolicy:
          TableName: !Ref LinkageTable 
       - DynamoDBCrudPolicy:
          TableName: !Ref PersonTable
       - DynamoDBCrudPolicy:
          TableName: !Ref RepoStatusTable
       - DynamoDBCrudPolicy:
          TableName: !Ref GithubTable
       - DynamoDBCrudPolicy:
          TableName: !Ref AgreementTable 
       - DynamoDBCrudPolicy:
          TableName: !Ref PEQTable 
       - DynamoDBCrudPolicy:
          TableName: !Ref PEQActionTable 
       - DynamoDBCrudPolicy:
          TableName: !Ref PEQRawTable 
       - DynamoDBCrudPolicy:
          TableName: !Ref PEQSummaryTable 



Outputs:
  WebsiteURL:
    Description: "API Gateway endpoint URL for Prod stage for Find function"
    Value: !ImportValue "codeEquityS3-CES3URL"
  UserPoolID:
    Value: !Ref CECognitoUserPool
    Description: Cognito user pool id
  UserPoolClientId:
    Value: !Ref CECognitoUserPoolClient
    Description: codeequity app id for cognito user pool
  CodeEquityApiExecution:
    Description: "API Gateway endpoint URL for Prod stage for CodeEquity function"
    Value: !Sub "https://${CEAPI}.execute-api.${AWS::Region}.amazonaws.com/prod"
  CodeEquityLambdadFunction:
    Description: "CodeEquity Lambda Function ARN"
    Value: !GetAtt CELambda.Arn
  CELambdaFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt CELambdaRole.Arn
